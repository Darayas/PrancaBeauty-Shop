@inject PrancaBeauty.Application.Apps.Languages.ILanguageApplication _LanguageApplication
@{
    var qLang = await _LanguageApplication.GetAllLanguageForSiteLangAsync();
    TempData["LangDir"] = await _LanguageApplication.GetDirectionByCodeAsync(new PrancaBeauty.Application.Contracts.ApplicationDTO.Languages.InpGetDirectionByCode() { Code = await _LanguageApplication.GetCodeByAbbrAsync(new PrancaBeauty.Application.Contracts.ApplicationDTO.Languages.InpGetCodeByAbbr() { Abbr = GetAbbr() }) });
    TempData.Keep();
}

<a href="#"><img class="lang-flag" src="@(await _LanguageApplication.GetFlagUrlByCodeAsync(new PrancaBeauty.Application.Contracts.ApplicationDTO.Languages.InpGetFlagUrlByCode { Code=await _LanguageApplication.GetCodeByAbbrAsync(new PrancaBeauty.Application.Contracts.ApplicationDTO.Languages.InpGetCodeByAbbr {  Abbr=GetAbbr()})}))" /> @(await _LanguageApplication.GetNativeNameByCodeAsync(new PrancaBeauty.Application.Contracts.ApplicationDTO.Languages.InpGetNativeNameByCode { Code= await _LanguageApplication.GetCodeByAbbrAsync(new PrancaBeauty.Application.Contracts.ApplicationDTO.Languages.InpGetCodeByAbbr { Abbr= GetAbbr() }) })) <i class="fas fa-angle-down"></i></a>
<ul class="dropdown_language">
    @foreach (var item in qLang)
    {
        <li><a href="@SetLang(item.Abbr)">@item.NativeName</a></li>
    }
</ul>

@functions {
    string SetLang(string Abbr)
    {
        var request = Context.Request;

        string Host = request.Scheme + "://" + request.Host;
        string Path = request.Path;
        string Parameters = request.QueryString.HasValue ? request.QueryString.Value : "";

        List<string> SplitPath = Path.Trim('/').Split("/").ToList();
        SplitPath.RemoveAt(0);

        Path = "/" + Abbr + "/" + string.Join("/", SplitPath);

        return Host + Path + Parameters;
    }

    string GetAbbr()
    {
        var request = Context.Request;
        string Path = request.Path;

        if (Path.Trim('/') == "")
            return "fa";

        return Path.Trim('/').Split("/")[0];
    }
}